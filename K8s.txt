- kubectl cluster-info
- kubectl get nodes
# Check if Kubernetes is running and nodes are ready

-kubectl api-resources
# Show the names and short names of the supported API resources as shown in the example.

- kubectl explain nodes
# Get the documentation of `Nodes` and its fields.

- kubectl explain pods
# Get the documentation of `Pods` and its fields.


!!!!! POD !!!!!

-YAML file

apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  labels:
    app: nginx
spec:
  containers:
  - name: mynginx
    image: nginx
    ports:
    - containerPort: 80

- kubectl create -f mypod.yaml 
# Create a pod with `kubectl create` command.

- kubectl get pods
# List the pods.

- kubectl get pods -o wide
# List pods in `ps output format` with more information (such as node name).

- kubectl describe pods/nginx-pod
# Show details of pod.

- kubectl get pods/nginx-pod -o yaml
# Show details of pod in `yaml format`.

- kubectl delete -f mypod.yaml veya - kubectl delete pod nginx-pod
# Delete the pod.


!!!!! REPLICASET !!!!!

-YAML file

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginx-rs
  labels:
    environment: dev
spec:
  # modify replicas according to your case
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: mynginx
        image: nginx
        ports:
        - containerPort: 80

- kubectl explain replicaset
# Get the documentation of `replicasets` and its fields.

- kubectl apply -f myreplicaset.yaml
# Create the replicaset with `kubectl apply` command.


!!!!! POD SELECTOR !!!!!

The .spec.selector field is a label selector. 

The .spec.selector field and .spec.template.metadata field must be same. There are additional issues related this subject like louse coupling, but we discuss this on the service object. 

 

!!!!! DEPLOYMENTS !!!!!

- YAML file

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    environment: dev
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80

- kubectl apply -f mydeployment.yaml
# Create the deployment with `kubectl apply` command.

- kubectl get pods -n kube-system      
# Show the list of the pods created for Kubernetes service itself. Note that pods of Kubernetes service are running on the master node.

- kubectl get pods -n kube-system -o wide   
# Show the details of pods in `kube-system` namespace. Note that pods of Kubernetes service are running on the master node.

- kubectl get pods -o wide --all-namespaces    
# Get the details of pods in all namespaces on master. Note that pods of Kubernetes service are running on the master node and also additional pods are running on the worker nodes to provide communication and management for Kubernetes service.

- kubectl run nginx-server --image=nginx  --port=80  
# Create and run a simple `Nginx` Server image.

- kubectl expose pod nginx-server --port=80 --type=NodePort 
# Expose the nginx-server pod as a new Kubernetes service on master.

- kubectl get service -o wide 
# Get the list of services and show the newly created service of `nginx-server`

- kubectl delete service nginx-server
- kubectl delete pods nginx-server

